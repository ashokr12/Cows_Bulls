{"version":3,"sources":["DispResult.jsx","CalcResult2.jsx","calcResult.jsx","Game.jsx","App.js","serviceWorker.js","index.js"],"names":["DispResult","props","refreshPage","window","location","reload","count","data","map","attempt","index","Disp","style","color","fontSize","ChallengeMode","width","height","margin","borderRadius","onClick","key","listStyleType","cows","numb","textAlign","float","className","bulls","CalcResult2","num","Cows","Bulls","disp","useState","Attempt","setAtt","useEffect","CalcResult","Arr1","Arr2","i","includes","Verify","Input","number","c","b","Game","handleChange","event","Ans","state","Answer","target","id","value","setState","console","log","handleSubmit","preventDefault","this","ind","onSubmit","e","borderBlockStartColor","borderInlineWidth","onChange","required","correctAnswer","Component","App","randGenerate","index1","Math","floor","random","Dig1","Dig2Arr_Filt","filter","index2","Dig2","Dig3Arr_Filt","index3","NormalMode","game","gamestat","SelectMode","fontWeight","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SA6EeA,MA1Ef,SAAoBC,GAClB,SAASC,IACPC,OAAOC,SAASC,QAAO,GAEzB,IAAIC,EAAQ,EAMZ,OALAL,EAAMM,KAAKC,KAAI,SAACC,EAASC,GACH,SAAhBD,EAAQE,MACVL,OAIF,6BACE,wBAAIM,MAAO,CAAEC,MAAO,QAASC,SAAU,SAAvC,mBACmBR,EAAO,KAEzBL,EAAMc,eAA0B,GAATT,EACtB,6BACE,wBAAIM,MAAO,CAAEC,MAAO,QAApB,eACA,4BACED,MAAO,CACLI,MAAO,QACPC,OAAQ,OACRC,OAAQ,OACRJ,SAAU,KACVK,aAAc,QAEhBC,QAASlB,GARX,gBAcF,GAEF,wBACEmB,IAAI,IACJT,MAAO,CAAEM,OAAQ,MAAOL,MAAO,QAASS,cAAe,SAEtDrB,EAAMM,KAAKC,KAAI,SAACC,EAASC,GAAV,OACE,GAAhBD,EAAQc,MAA6B,SAAhBd,EAAQE,KAC3B,yBAAKC,MAAO,CAAEC,MAAO,WACnB,2DAAiCJ,EAAQe,MACzC,6BACA,4BACEZ,MAAO,CACLI,MAAO,QACPC,OAAQ,OACRC,OAAQ,OACRJ,SAAU,KACVK,aAAc,QAEhBC,QAASlB,GARX,gBAcF,wBACEU,MAAO,CAAEa,UAAW,SAAUC,MAAO,UACrCC,UAAWlB,EAAQE,KACnBU,IAAKZ,EAAQe,MAEb,0BAAMH,IAAKZ,EAAQe,KAAMZ,MAAO,CAAEC,MAAO,UACtCJ,EAAQe,KADX,QACsBf,EAAQc,KAD9B,aAC8Cd,EAAQmB,MADtD,cAMN,gCC9COC,MAtBf,YAAiE,IAA1CC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMlB,EAAiB,EAAjBA,cAAiB,EACpCmB,mBAAS,IAD2B,mBACvDC,EADuD,KAC9CC,EAD8C,KAe9D,OAZAC,qBAAU,WACRD,EAAO,GAAD,mBACDD,GADC,CAEJ,CACEX,KAAMM,EACNP,KAAMQ,EACNH,MAAOI,EACPrB,KAAMsB,QAGT,CAACH,EAAKC,EAAMC,EAAOC,EAAMlB,IAG1B,6BACE,kBAAC,EAAD,CAAYR,KAAM4B,EAASpB,cAAeA,MCYjCuB,EA7BI,SAACrC,GAClB,IAD4B,EACb,SAACsC,EAAMC,GAGpB,IAFA,IAAIjB,EAAO,EACPK,EAAQ,EACHa,EAAI,EAAGA,EAAI,EAAGA,IACjBF,EAAKE,IAAMD,EAAKC,GAClBlB,IAEIiB,EAAKE,SAASH,EAAKE,KACrBb,IAIN,MAAO,CAACL,EAAMK,GAEHe,CAAO1C,EAAM2C,MAAO3C,EAAM4C,QAfX,mBAevBC,EAfuB,KAepBC,EAfoB,KAiB5B,OACE,6BACE,kBAAC,EAAD,CACEjB,IAAK7B,EAAM2C,MACXb,KAAMe,EACNd,MAAOe,EACPd,KAAMhC,EAAMgC,KACZlB,cAAed,EAAMc,kBC2DdiC,E,kDAjFb,WAAY/C,GAAQ,IAAD,8BACjB,cAAMA,IAaRgD,aAAe,SAACC,GACd,IAAIC,EAAG,YAAO,EAAKC,MAAMC,QACzBF,EAAID,EAAMI,OAAOC,IAAIzB,IAAMoB,EAAMI,OAAOE,MACxC,EAAKC,SAAS,CAAEJ,OAAQF,IAAO,kBAC7BO,QAAQC,IAAI,gBAAiB,EAAKP,MAAMC,WAE1C,EAAKI,SAAS,CAAExB,KAAM,SAAU,kBAC9ByB,QAAQC,IAAI,qBAAsB,EAAKP,MAAMnB,UArB9B,EAyBnB2B,aAAe,SAACV,GACdA,EAAMW,iBACNH,QAAQC,IAAI,EAAKP,MAAMC,QACvB,EAAKI,SAAS,CAAExB,KAAM,WAzBtB,EAAKmB,MAAQ,CACXC,OAAQ,CACN,CAAEvB,IAAK,EAAGyB,GAAI,GACd,CAAEzB,IAAK,EAAGyB,GAAI,GACd,CAAEzB,IAAK,EAAGyB,GAAI,GACd,CAAEzB,IAAK,EAAGyB,GAAI,IAEhBtB,KAAM,QAVS,E,qDA+BT,IAAD,OACHkB,EAAMW,KAAKV,MAAMC,OAAO7C,KAAI,SAACsB,EAAKiC,GACpC,OAAOjC,EAAIA,OAEb,OACE,6BACE,wBAAIlB,MAAO,CAAEC,MAAO,UAApB,qBACCiD,KAAK7D,MAAMc,cACV,wBAAIH,MAAO,CAAEC,MAAO,QAApB,2DAIA,GAEF,0BAAMmD,SAAU,SAACC,GAAD,OAAO,EAAKL,aAAaK,KACtCH,KAAKV,MAAMC,OAAO7C,KAAI,SAACsB,EAAKpB,GAAN,OACrB,yBAAKW,IAAKS,EAAIyB,IACZ,2BAAO3C,MAAO,CAAEM,OAAQ,mBAAoBL,MAAO,UAAnD,gBACYH,EAAQ,IAEpB,2BACEE,MAAO,CACLI,MAAO,OACPkD,sBAAuB,SACvBC,kBAAmB,QAErBX,MAAO1B,EAAIA,IACXyB,GAAIzB,EAAIyB,GACRa,SAAU,EAAKnB,aACfoB,UAAQ,QAId,4BACEzD,MAAO,CAAEI,MAAO,OAAQE,OAAQ,OAAQC,aAAc,SADxD,WAMF,6BACA,kBAAC,EAAD,CACEyB,MAAOO,EACPN,OAAQiB,KAAK7D,MAAMqE,cACnBrC,KAAM6B,KAAKV,MAAMnB,KACjBlB,cAAe+C,KAAK7D,MAAMc,qB,GA5EjBwD,aC8GJC,E,kDA7Gb,aAAe,IAAD,8BACZ,gBAYFC,aAAe,WACb,IACMC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UACzBC,EAFU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEpBJ,GAGfK,EADU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACfC,QAAO,SAAClD,EAAKpB,GAAN,OAAgBA,GAASgE,EAAS,KAChEO,EAASN,KAAKC,MAAsB,EAAhBD,KAAKE,UACzBK,EAAOH,EAAaE,GAEpBE,EAAeJ,EAAaC,QAAO,SAAClD,EAAKpB,GAAN,OAAgBA,GAASuE,KAC5DG,EAAST,KAAKC,MAAsB,EAAhBD,KAAKE,UAQ/B,MADU,CAACC,EAAMI,EANJC,EAAaC,GAELD,EAAaH,QAAO,SAAClD,EAAKpB,GAAN,OAAgBA,GAAS0E,KACnDT,KAAKC,MAAsB,EAAhBD,KAAKE,aA5BnB,EAmCdQ,WAAa,WACX,IAAIvD,EAAM,EAAK2C,eACXa,EAAO,EAAKlC,MAAMmC,SACtBD,EAAKzC,OAASf,EACd4B,QAAQC,IAAI7B,GACZwD,EAAKD,YAAa,EAClBC,EAAKE,YAAa,EAClB,EAAK/B,SAAS,CAAE8B,SAAUD,KA1Cd,EA6CdvE,cAAgB,WACd,IAAIe,EAAM,EAAK2C,eACXa,EAAO,EAAKlC,MAAMmC,SACtBD,EAAKzC,OAASf,EACd4B,QAAQC,IAAI7B,GACZwD,EAAKvE,eAAgB,EACrBuE,EAAKE,YAAa,EAClB,EAAK/B,SAAS,CAAE8B,SAAUD,IAC1B5B,QAAQC,IAAI,EAAKP,MAAMmC,WAlDvB,EAAKnC,MAAQ,CACXmC,SAAU,CACR1C,OAAQ,GACRwC,YAAY,EACZtE,eAAe,EACfyE,YAAY,IARJ,E,qDA0DZ,OADA9B,QAAQC,IAAI,mBAEV,yBAAKhC,UAAU,OACb,wBAAIf,MAAO,CAAEC,MAAO,SAApB,kBACA,wBAAID,MAAO,CAAEC,MAAO,UAApB,8BACCiD,KAAKV,MAAMmC,SAASF,WACnB,kBAAC,EAAD,CAAMf,cAAeR,KAAKV,MAAMmC,SAAS1C,SACvCiB,KAAKV,MAAMmC,SAASC,WACtB,GAEA,4BACE5E,MAAO,CACLI,MAAO,QACPC,OAAQ,OACRH,SAAU,KACV2E,WAAY,OACZtE,aAAc,QAEhBC,QAAS0C,KAAKuB,YARhB,SAcF,6BACA,6BACCvB,KAAKV,MAAMmC,SAASxE,cACnB,kBAAC,EAAD,CACEuD,cAAeR,KAAKV,MAAMmC,SAAS1C,OACnC9B,cAAe+C,KAAKV,MAAMmC,SAASxE,gBAEnC+C,KAAKV,MAAMmC,SAASC,WACtB,GAEA,4BACE5E,MAAO,CACLI,MAAO,QACPC,OAAQ,OACRH,SAAU,KACV2E,WAAY,OACZtE,aAAc,QAEhBC,QAAS0C,KAAK/C,eARhB,uB,GA5FQwD,aCQEmB,QACW,cAA7BvF,OAAOC,SAASuF,UAEe,UAA7BxF,OAAOC,SAASuF,UAEhBxF,OAAOC,SAASuF,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.adee3a46.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DispResult.css\";\r\n\r\nfunction DispResult(props) {\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n  var count = 0;\r\n  props.data.map((attempt, index) => {\r\n    if (attempt.Disp == \"block\") {\r\n      count++;\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <h4 style={{ color: \"white\", fontSize: \"30px\" }}>\r\n        No.of attempts: {count}{\" \"}\r\n      </h4>\r\n      {props.ChallengeMode && count == 5 ? (\r\n        <div>\r\n          <h2 style={{ color: \"red\" }}>Game Over!!</h2>\r\n          <button\r\n            style={{\r\n              width: \"150px\",\r\n              height: \"30px\",\r\n              margin: \"10px\",\r\n              fontSize: \"25\",\r\n              borderRadius: \"15px\",\r\n            }}\r\n            onClick={refreshPage}\r\n          >\r\n            Play Again!\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <ul\r\n        key=\"5\"\r\n        style={{ margin: \"5px\", color: \"white\", listStyleType: \"none\" }}\r\n      >\r\n        {props.data.map((attempt, index) =>\r\n          attempt.cows == 4 && attempt.Disp == \"block\" ? (\r\n            <div style={{ color: \"Orange\" }}>\r\n              <h2>\"Congrats!!\", the number is {attempt.numb}</h2>\r\n              <br />\r\n              <button\r\n                style={{\r\n                  width: \"150px\",\r\n                  height: \"30px\",\r\n                  margin: \"10px\",\r\n                  fontSize: \"25\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n                onClick={refreshPage}\r\n              >\r\n                Play Again!\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <li\r\n              style={{ textAlign: \"center\", float: \"centre\" }}\r\n              className={attempt.Disp}\r\n              key={attempt.numb}\r\n            >\r\n              <span key={attempt.numb} style={{ color: \"white\" }}>\r\n                {attempt.numb} has {attempt.cows} cows and {attempt.bulls} bulls\r\n              </span>\r\n            </li>\r\n          )\r\n        )}\r\n        <br />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DispResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DispResult from \"./DispResult\";\r\n\r\nfunction CalcResult2({ num, Cows, Bulls, disp, ChallengeMode }) {\r\n  const [Attempt, setAtt] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setAtt([\r\n      ...Attempt,\r\n      {\r\n        numb: num,\r\n        cows: Cows,\r\n        bulls: Bulls,\r\n        Disp: disp,\r\n      },\r\n    ]);\r\n  }, [num, Cows, Bulls, disp, ChallengeMode]);\r\n\r\n  return (\r\n    <div>\r\n      <DispResult data={Attempt} ChallengeMode={ChallengeMode} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalcResult2;\r\n","import React, { Component } from \"react\";\r\nimport CalcResult2 from \"./CalcResult2\";\r\n\r\nconst CalcResult = (props) => {\r\n  const Verify = (Arr1, Arr2) => {\r\n    var cows = 0;\r\n    var bulls = 0;\r\n    for (var i = 0; i < 4; i++) {\r\n      if (Arr1[i] == Arr2[i]) {\r\n        cows++;\r\n      } else {\r\n        if (Arr2.includes(Arr1[i])) {\r\n          bulls++;\r\n        }\r\n      }\r\n    }\r\n    return [cows, bulls];\r\n  };\r\n  var [c, b] = Verify(props.Input, props.number);\r\n\r\n  return (\r\n    <div>\r\n      <CalcResult2\r\n        num={props.Input}\r\n        Cows={c}\r\n        Bulls={b}\r\n        disp={props.disp}\r\n        ChallengeMode={props.ChallengeMode}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default CalcResult;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport CalcResult from \"./calcResult.jsx\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      Answer: [\r\n        { num: 2, id: 0 },\r\n        { num: 4, id: 1 },\r\n        { num: 6, id: 2 },\r\n        { num: 8, id: 3 },\r\n      ],\r\n      disp: \"none\",\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    var Ans = [...this.state.Answer];\r\n    Ans[event.target.id].num = event.target.value;\r\n    this.setState({ Answer: Ans }, () =>\r\n      console.log(\"state changed\", this.state.Answer)\r\n    );\r\n    this.setState({ disp: \"none\" }, () =>\r\n      console.log(\"Disp state changed\", this.state.disp)\r\n    );\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(this.state.Answer);\r\n    this.setState({ disp: \"block\" });\r\n  };\r\n\r\n  render() {\r\n    var Ans = this.state.Answer.map((num, ind) => {\r\n      return num.num;\r\n    });\r\n    return (\r\n      <div>\r\n        <h2 style={{ color: \"white\" }}>Guess the Number!</h2>\r\n        {this.props.ChallengeMode ? (\r\n          <h2 style={{ color: \"red\" }}>\r\n            Challenge Mode: Guess the number in 5 Attempts or less!\r\n          </h2>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <form onSubmit={(e) => this.handleSubmit(e)}>\r\n          {this.state.Answer.map((num, index) => (\r\n            <div key={num.id}>\r\n              <label style={{ margin: \"5px 5px 10px 5px\", color: \"white\" }}>\r\n                {`Digit ${index + 1}`}\r\n              </label>\r\n              <input\r\n                style={{\r\n                  width: \"50px\",\r\n                  borderBlockStartColor: \"orange\",\r\n                  borderInlineWidth: \"15px\",\r\n                }}\r\n                value={num.num}\r\n                id={num.id}\r\n                onChange={this.handleChange}\r\n                required\r\n              ></input>\r\n            </div>\r\n          ))}\r\n          <button\r\n            style={{ width: \"90px\", margin: \"20px\", borderRadius: \"10px\" }}\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <br />\r\n        <CalcResult\r\n          Input={Ans}\r\n          number={this.props.correctAnswer}\r\n          disp={this.state.disp}\r\n          ChallengeMode={this.props.ChallengeMode}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gamestat: {\n        number: [],\n        NormalMode: false,\n        ChallengeMode: false,\n        SelectMode: false,\n      },\n    };\n  }\n\n  randGenerate = () => {\n    const Dig1Arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const index1 = Math.floor(Math.random() * 9);\n    const Dig1 = Dig1Arr[index1];\n\n    const Dig2Arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const Dig2Arr_Filt = Dig2Arr.filter((num, index) => index != index1 + 1);\n    const index2 = Math.floor(Math.random() * 9);\n    const Dig2 = Dig2Arr_Filt[index2];\n\n    const Dig3Arr_Filt = Dig2Arr_Filt.filter((num, index) => index != index2);\n    const index3 = Math.floor(Math.random() * 8);\n    const Dig3 = Dig3Arr_Filt[index3];\n\n    const Dig4Arr_Filt = Dig3Arr_Filt.filter((num, index) => index != index3);\n    const index4 = Math.floor(Math.random() * 7);\n    const Dig4 = Dig4Arr_Filt[index4];\n\n    var num = [Dig1, Dig2, Dig3, Dig4];\n    return num;\n  };\n\n  NormalMode = () => {\n    var num = this.randGenerate();\n    var game = this.state.gamestat;\n    game.number = num;\n    console.log(num);\n    game.NormalMode = true;\n    game.SelectMode = true;\n    this.setState({ gamestat: game });\n  };\n\n  ChallengeMode = () => {\n    var num = this.randGenerate();\n    var game = this.state.gamestat;\n    game.number = num;\n    console.log(num);\n    game.ChallengeMode = true;\n    game.SelectMode = true;\n    this.setState({ gamestat: game });\n    console.log(this.state.gamestat);\n  };\n\n  render() {\n    console.log(\"Called from App\");\n    return (\n      <div className=\"App\">\n        <h1 style={{ color: \"Pink\" }}>Cows and Bulls</h1>\n        <h2 style={{ color: \"white\" }}>Let's see what you've got!</h2>\n        {this.state.gamestat.NormalMode ? (\n          <Game correctAnswer={this.state.gamestat.number} />\n        ) : this.state.gamestat.SelectMode ? (\n          \"\"\n        ) : (\n          <button\n            style={{\n              width: \"150px\",\n              height: \"40px\",\n              fontSize: \"25\",\n              fontWeight: \"bold\",\n              borderRadius: \"15px\",\n            }}\n            onClick={this.NormalMode}\n          >\n            Start\n          </button>\n        )}\n\n        <br />\n        <br />\n        {this.state.gamestat.ChallengeMode ? (\n          <Game\n            correctAnswer={this.state.gamestat.number}\n            ChallengeMode={this.state.gamestat.ChallengeMode}\n          />\n        ) : this.state.gamestat.SelectMode ? (\n          \"\"\n        ) : (\n          <button\n            style={{\n              width: \"150px\",\n              height: \"40px\",\n              fontSize: \"25\",\n              fontWeight: \"bold\",\n              borderRadius: \"15px\",\n            }}\n            onClick={this.ChallengeMode}\n          >\n            Challenge Mode\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}